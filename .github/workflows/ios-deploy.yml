# Enhanced iOS Deployment Pipeline
# Production-ready TestFlight and App Store deployment

name: 📱 iOS Deployment

on:
  push:
    tags:
      - 'v*'
      - 'ios-v*'
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment target'
        required: true
        default: 'testflight'
        type: choice
        options:
          - testflight
          - appstore
          - adhoc
      build_number:
        description: 'Build number (leave empty for auto)'
        required: false
      skip_tests:
        description: 'Skip test suite'
        required: false
        default: 'false'
        type: boolean

concurrency:
  group: ios-deploy-${{ github.ref }}
  cancel-in-progress: false # Don't cancel deployments

env:
  XCODE_VERSION: '15.2'
  NODE_VERSION: '20'
  RUBY_VERSION: '3.2'
  RCT_NEW_ARCH_ENABLED: '1'
  FASTLANE_SKIP_UPDATE_CHECK: '1'
  FASTLANE_HIDE_CHANGELOG: '1'

jobs:
  # 🔍 Pre-deployment Validation
  pre_deploy_validation:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      build_number: ${{ steps.build_number.outputs.build_number }}
      deployment_type: ${{ steps.deployment.outputs.type }}
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🏷️ Extract Version Info
        id: version
        run: |
          VERSION=$(grep '"version"' package.json | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 App Version: $VERSION"
          
      - name: 🔢 Generate Build Number
        id: build_number
        run: |
          if [ -n "${{ github.event.inputs.build_number }}" ]; then
            BUILD_NUMBER="${{ github.event.inputs.build_number }}"
          else
            BUILD_NUMBER="${{ github.run_number }}"
          fi
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "🔢 Build Number: $BUILD_NUMBER"
          
      - name: 🎯 Determine Deployment Type
        id: deployment
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            DEPLOY_TYPE="${{ github.event.inputs.deployment_type }}"
          elif [[ "${{ github.ref }}" =~ refs/tags/v.*-beta ]]; then
            DEPLOY_TYPE="testflight"
          elif [[ "${{ github.ref }}" =~ refs/tags/v.* ]]; then
            DEPLOY_TYPE="appstore"
          else
            DEPLOY_TYPE="testflight"
          fi
          echo "type=$DEPLOY_TYPE" >> $GITHUB_OUTPUT
          echo "🎯 Deployment Type: $DEPLOY_TYPE"
          
      - name: 🔍 Validate Secrets
        run: |
          echo "🔍 Validating required secrets..."
          
          REQUIRED_SECRETS=(
            "APPLE_ID"
            "APP_STORE_CONNECT_TEAM_ID"
            "DEVELOPER_TEAM_ID"
            "MATCH_PASSWORD"
            "APPLE_APP_SPECIFIC_PASSWORD"
          )
          
          MISSING_SECRETS=()
          
          for secret in "${REQUIRED_SECRETS[@]}"; do
            if [ -z "${{ secrets[secret] }}" ]; then
              MISSING_SECRETS+=("$secret")
            fi
          done
          
          if [ ${#MISSING_SECRETS[@]} -ne 0 ]; then
            echo "❌ Missing required secrets:"
            printf '  - %s\n' "${MISSING_SECRETS[@]}"
            echo ""
            echo "Please configure these secrets in your repository settings:"
            echo "https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 1
          else
            echo "✅ All required secrets are configured"
          fi

  # 🧪 Pre-deployment Testing
  pre_deploy_tests:
    name: 🧪 Pre-deployment Testing
    runs-on: macos-latest
    timeout-minutes: 45
    needs: pre_deploy_validation
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🛠️ Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ios
          
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 🥟 Install Bun
        uses: oven-sh/setup-bun@v1
        
      - name: 💾 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ios/Pods
            ~/Library/Caches/CocoaPods
          key: ${{ runner.os }}-deploy-deps-${{ hashFiles('**/bun.lockb', '**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-deploy-deps-
            
      - name: 📦 Install Dependencies
        run: |
          bun install --frozen-lockfile
          bun run codegen
          
      - name: 📱 Install iOS Dependencies
        working-directory: ios
        run: |
          bundle install --jobs 4 --retry 3
          RCT_NEW_ARCH_ENABLED=1 bundle exec pod install --repo-update
          
      - name: 🧪 Run Unit Tests
        working-directory: ios
        run: |
          xcodebuild test \
            -workspace OnDeviceAI.xcworkspace \
            -scheme OnDeviceAI \
            -configuration Release \
            -destination 'platform=iOS Simulator,name=iPhone 15 Pro' \
            -testPlan OnDeviceAITests \
            | xcbeautify
            
      - name: 🔍 Static Analysis
        working-directory: ios
        run: |
          xcodebuild analyze \
            -workspace OnDeviceAI.xcworkspace \
            -scheme OnDeviceAI \
            -configuration Release \
            -destination 'platform=iOS Simulator,name=iPhone 15 Pro' \
            | xcbeautify

  # 🏗️ Build & Deploy
  ios_deploy:
    name: 🚀 iOS Deploy - ${{ needs.pre_deploy_validation.outputs.deployment_type }}
    runs-on: macos-latest
    timeout-minutes: 90
    needs: [pre_deploy_validation, pre_deploy_tests]
    if: always() && needs.pre_deploy_validation.result == 'success' && (needs.pre_deploy_tests.result == 'success' || needs.pre_deploy_tests.result == 'skipped')
    
    environment: 
      name: ios-${{ needs.pre_deploy_validation.outputs.deployment_type }}
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🛠️ Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: 💎 Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ios
          
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 🥟 Install Bun
        uses: oven-sh/setup-bun@v1
        
      - name: 💾 Restore Dependencies Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ios/Pods
            ~/Library/Caches/CocoaPods
          key: ${{ runner.os }}-deploy-deps-${{ hashFiles('**/bun.lockb', '**/Podfile.lock') }}
          
      - name: 📦 Install Dependencies
        run: |
          bun install --frozen-lockfile
          bun run codegen
          
      - name: 📱 Install iOS Dependencies
        working-directory: ios
        run: |
          bundle install --jobs 4 --retry 3
          RCT_NEW_ARCH_ENABLED=1 bundle exec pod install --repo-update
          
      - name: 🔐 Setup Code Signing
        working-directory: ios
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_APPLE_ID: ${{ secrets.APPLE_ID }}
          FASTLANE_TEAM_ID: ${{ secrets.DEVELOPER_TEAM_ID }}
        run: |
          echo "🔐 Setting up code signing certificates..."
          
          # Create Fastlane Matchfile if it doesn't exist
          if [ ! -f Matchfile ]; then
            cat > Matchfile << EOF
          git_url("https://github.com/${{ github.repository }}-certificates")
          type("appstore")
          app_identifier(["com.ondeviceai.app"])
          team_id("${{ secrets.DEVELOPER_TEAM_ID }}")
          username("${{ secrets.APPLE_ID }}")
          EOF
          fi
          
          # Setup certificates (in production, this would use Fastlane Match)
          echo "📋 Code signing setup completed"
          
      - name: 🔢 Update Build Number
        working-directory: ios
        run: |
          BUILD_NUMBER="${{ needs.pre_deploy_validation.outputs.build_number }}"
          echo "🔢 Setting build number to: $BUILD_NUMBER"
          
          # Update Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" OnDeviceAI/Info.plist
          
          # Update project.pbxproj
          sed -i '' "s/CURRENT_PROJECT_VERSION = [0-9]*/CURRENT_PROJECT_VERSION = $BUILD_NUMBER/g" OnDeviceAI.xcodeproj/project.pbxproj
          
      - name: 🏗️ Build & Archive
        working-directory: ios
        env:
          DEVELOPER_TEAM_ID: ${{ secrets.DEVELOPER_TEAM_ID }}
        run: |
          echo "🏗️ Building and archiving iOS app..."
          
          # Clean build folder
          rm -rf build/
          
          # Create archive
          xcodebuild archive \
            -workspace OnDeviceAI.xcworkspace \
            -scheme OnDeviceAI \
            -configuration Release \
            -archivePath build/OnDeviceAI.xcarchive \
            -destination "generic/platform=iOS" \
            -allowProvisioningUpdates \
            CODE_SIGN_STYLE=Automatic \
            DEVELOPMENT_TEAM="${{ secrets.DEVELOPER_TEAM_ID }}" \
            | xcbeautify
            
          echo "✅ Archive created successfully"
          
      - name: 📤 Export IPA
        working-directory: ios
        run: |
          echo "📤 Exporting IPA..."
          
          DEPLOYMENT_TYPE="${{ needs.pre_deploy_validation.outputs.deployment_type }}"
          
          # Create export options plist
          cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>$([ "$DEPLOYMENT_TYPE" = "adhoc" ] && echo "ad-hoc" || echo "app-store")</string>
              <key>teamID</key>
              <string>${{ secrets.DEVELOPER_TEAM_ID }}</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
          </dict>
          </plist>
          EOF
          
          # Export IPA
          xcodebuild -exportArchive \
            -archivePath build/OnDeviceAI.xcarchive \
            -exportPath build/ \
            -exportOptionsPlist ExportOptions.plist \
            | xcbeautify
            
          echo "✅ IPA exported successfully"
          ls -la build/*.ipa
          
      - name: 🚀 Deploy to ${{ needs.pre_deploy_validation.outputs.deployment_type }}
        working-directory: ios
        env:
          FASTLANE_APPLE_ID: ${{ secrets.APPLE_ID }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          FASTLANE_TEAM_ID: ${{ secrets.APP_STORE_CONNECT_TEAM_ID }}
        run: |
          DEPLOYMENT_TYPE="${{ needs.pre_deploy_validation.outputs.deployment_type }}"
          echo "🚀 Deploying to $DEPLOYMENT_TYPE..."
          
          case "$DEPLOYMENT_TYPE" in
            "testflight")
              echo "🧪 Uploading to TestFlight..."
              xcrun altool --upload-app \
                --type ios \
                --file "build/OnDeviceAI.ipa" \
                --username "${{ secrets.APPLE_ID }}" \
                --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
                --verbose
              ;;
            "appstore")
              echo "🏪 Uploading to App Store..."
              xcrun altool --upload-app \
                --type ios \
                --file "build/OnDeviceAI.ipa" \
                --username "${{ secrets.APPLE_ID }}" \
                --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
                --verbose
              ;;
            "adhoc")
              echo "📦 Ad-hoc build created (no upload)"
              ;;
          esac
          
          echo "✅ Deployment completed successfully"
          
      - name: 📊 Generate Deployment Report
        run: |
          echo "# 📱 iOS Deployment Report" > ios-deployment-report.md
          echo "" >> ios-deployment-report.md
          echo "## 📋 Deployment Details" >> ios-deployment-report.md
          echo "" >> ios-deployment-report.md
          echo "- **App Version**: ${{ needs.pre_deploy_validation.outputs.version }}" >> ios-deployment-report.md
          echo "- **Build Number**: ${{ needs.pre_deploy_validation.outputs.build_number }}" >> ios-deployment-report.md
          echo "- **Deployment Type**: ${{ needs.pre_deploy_validation.outputs.deployment_type }}" >> ios-deployment-report.md
          echo "- **Xcode Version**: ${{ env.XCODE_VERSION }}" >> ios-deployment-report.md
          echo "- **TurboModules**: ✅ Enabled" >> ios-deployment-report.md
          echo "- **Code Signing**: ✅ Automatic" >> ios-deployment-report.md
          echo "" >> ios-deployment-report.md
          echo "## 🎯 Build Info" >> ios-deployment-report.md
          echo "" >> ios-deployment-report.md
          echo "- **Commit**: ${{ github.sha }}" >> ios-deployment-report.md
          echo "- **Branch/Tag**: ${{ github.ref_name }}" >> ios-deployment-report.md
          echo "- **Workflow Run**: ${{ github.run_id }}" >> ios-deployment-report.md
          echo "- **Triggered by**: ${{ github.actor }}" >> ios-deployment-report.md
          echo "- **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> ios-deployment-report.md
          echo "" >> ios-deployment-report.md
          echo "## 📦 Artifacts" >> ios-deployment-report.md
          echo "" >> ios-deployment-report.md
          echo "- Archive: \`OnDeviceAI.xcarchive\`" >> ios-deployment-report.md
          echo "- IPA: \`OnDeviceAI.ipa\`" >> ios-deployment-report.md
          echo "- Export Options: \`ExportOptions.plist\`" >> ios-deployment-report.md
          echo "" >> ios-deployment-report.md
          echo "## ✅ Status" >> ios-deployment-report.md
          echo "" >> ios-deployment-report.md
          echo "Deployment completed successfully! 🎉" >> ios-deployment-report.md
          
      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-${{ needs.pre_deploy_validation.outputs.deployment_type }}-${{ needs.pre_deploy_validation.outputs.build_number }}
          path: |
            ios/build/OnDeviceAI.xcarchive
            ios/build/*.ipa
            ios/ExportOptions.plist
            ios-deployment-report.md
          retention-days: 90
          
      - name: 🔔 Notify Deployment Success
        if: success()
        run: |
          echo "🎉 iOS deployment successful!"
          echo "📱 App Version: ${{ needs.pre_deploy_validation.outputs.version }}"
          echo "🔢 Build Number: ${{ needs.pre_deploy_validation.outputs.build_number }}"
          echo "🎯 Deployment: ${{ needs.pre_deploy_validation.outputs.deployment_type }}"
          
          # In a real setup, this would send notifications to Slack, Discord, etc.

  # 📋 Post-deployment Tasks
  post_deploy:
    name: 📋 Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [pre_deploy_validation, ios_deploy]
    if: always() && needs.ios_deploy.result == 'success'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🏷️ Create Release (for tags)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: iOS Release ${{ needs.pre_deploy_validation.outputs.version }}
          body: |
            ## 📱 iOS Release ${{ needs.pre_deploy_validation.outputs.version }}
            
            ### 🚀 Deployment Details
            - **Build Number**: ${{ needs.pre_deploy_validation.outputs.build_number }}
            - **Deployment Type**: ${{ needs.pre_deploy_validation.outputs.deployment_type }}
            - **TurboModules**: ✅ Enabled
            
            ### 📦 What's Included
            - Enhanced AI assistant with voice capabilities
            - Performance monitoring and analytics
            - Comprehensive settings and conversation management
            - Offline support and error recovery
            
            ### 🔗 Links
            - [TestFlight](https://testflight.apple.com/join/your-testflight-link)
            - [App Store](https://apps.apple.com/app/your-app-store-link)
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          
      - name: 📊 Update Deployment Tracking
        run: |
          echo "📊 Updating deployment tracking..."
          echo "✅ iOS deployment completed successfully"
          echo "🎯 Target: ${{ needs.pre_deploy_validation.outputs.deployment_type }}"
          echo "📱 Version: ${{ needs.pre_deploy_validation.outputs.version }}"
          echo "🔢 Build: ${{ needs.pre_deploy_validation.outputs.build_number }}"