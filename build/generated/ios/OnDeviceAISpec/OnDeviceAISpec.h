/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of OnDeviceAISpec symbols
#ifndef OnDeviceAISpec_H
#define OnDeviceAISpec_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>


NS_ASSUME_NONNULL_BEGIN

@protocol NativeCalendarSpec <RCTBridgeModule, RCTTurboModule>

- (void)requestPermission:(RCTPromiseResolveBlock)resolve
                   reject:(RCTPromiseRejectBlock)reject;
- (void)createEvent:(NSString *)title
            isoDate:(NSString *)isoDate
           location:(NSString *)location
            resolve:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject;
- (void)listEvents:(NSString *)isoDate
           resolve:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject;
- (void)updateEvent:(NSString *)eventId
              title:(NSString *)title
            isoDate:(NSString *)isoDate
           location:(NSString *)location
            resolve:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject;
- (void)deleteEvent:(NSString *)eventId
            resolve:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject;
- (void)getPermissionStatus:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;

@end

@interface NativeCalendarSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeCalendar'
   */
  class JSI_EXPORT NativeCalendarSpecJSI : public ObjCTurboModule {
  public:
    NativeCalendarSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeSpeechModule {
    struct SpeechOptions {
      NSString *voiceId() const;
      std::optional<double> rate() const;
      std::optional<double> pitch() const;
      std::optional<double> volume() const;

      SpeechOptions(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSpeechModule_SpeechOptions)
+ (RCTManagedPointer *)JS_NativeSpeechModule_SpeechOptions:(id)json;
@end
@protocol NativeSpeechModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)addListener:(NSString *)eventName;
- (void)removeListeners:(double)count;
- (void)requestSpeechRecognitionAuthorization:(RCTPromiseResolveBlock)resolve
                                       reject:(RCTPromiseRejectBlock)reject;
- (void)startRecognition:(NSString *)locale
requiresOnDeviceRecognition:(BOOL)requiresOnDeviceRecognition
                 resolve:(RCTPromiseResolveBlock)resolve
                  reject:(RCTPromiseRejectBlock)reject;
- (void)stopRecognition:(RCTPromiseResolveBlock)resolve
                 reject:(RCTPromiseRejectBlock)reject;
- (void)destroyRecognizer:(RCTPromiseResolveBlock)resolve
                   reject:(RCTPromiseRejectBlock)reject;
- (void)isRecognitionAvailable:(RCTPromiseResolveBlock)resolve
                        reject:(RCTPromiseRejectBlock)reject;
- (void)getSupportedLocales:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)getAvailableVoices:(RCTPromiseResolveBlock)resolve
                    reject:(RCTPromiseRejectBlock)reject;
- (void)speak:(NSString *)text
      options:(JS::NativeSpeechModule::SpeechOptions &)options
      resolve:(RCTPromiseResolveBlock)resolve
       reject:(RCTPromiseRejectBlock)reject;
- (void)stopSpeaking:(RCTPromiseResolveBlock)resolve
              reject:(RCTPromiseRejectBlock)reject;
- (void)pauseSpeaking:(RCTPromiseResolveBlock)resolve
               reject:(RCTPromiseRejectBlock)reject;
- (void)resumeSpeaking:(RCTPromiseResolveBlock)resolve
                reject:(RCTPromiseRejectBlock)reject;
- (void)isSpeaking:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject;
- (void)isPaused:(RCTPromiseResolveBlock)resolve
          reject:(RCTPromiseRejectBlock)reject;
- (void)setDefaultVoice:(NSString *)voiceId
                resolve:(RCTPromiseResolveBlock)resolve
                 reject:(RCTPromiseRejectBlock)reject;
- (void)configureAudioSession:(RCTPromiseResolveBlock)resolve
                       reject:(RCTPromiseRejectBlock)reject;
- (void)releaseAudioSession:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)getVersion:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject;
- (void)isInitialized:(RCTPromiseResolveBlock)resolve
               reject:(RCTPromiseRejectBlock)reject;

@end

@interface NativeSpeechModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSpeechModule'
   */
  class JSI_EXPORT NativeSpeechModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeSpeechModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

inline NSString *JS::NativeSpeechModule::SpeechOptions::voiceId() const
{
  id const p = _v[@"voiceId"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<double> JS::NativeSpeechModule::SpeechOptions::rate() const
{
  id const p = _v[@"rate"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeSpeechModule::SpeechOptions::pitch() const
{
  id const p = _v[@"pitch"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeSpeechModule::SpeechOptions::volume() const
{
  id const p = _v[@"volume"];
  return RCTBridgingToOptionalDouble(p);
}
NS_ASSUME_NONNULL_END
#endif // OnDeviceAISpec_H
