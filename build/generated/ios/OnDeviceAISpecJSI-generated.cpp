/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleCpp.js
 */

#include "OnDeviceAISpecJSI.h"

namespace facebook::react {

static jsi::Value __hostFunction_NativeCalendarCxxSpecJSI_requestPermission(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCalendarCxxSpecJSI *>(&turboModule)->requestPermission(
    rt
  );
}
static jsi::Value __hostFunction_NativeCalendarCxxSpecJSI_createEvent(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCalendarCxxSpecJSI *>(&turboModule)->createEvent(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 || args[2].isUndefined() ? std::nullopt : std::make_optional(args[2].asString(rt))
  );
}
static jsi::Value __hostFunction_NativeCalendarCxxSpecJSI_listEvents(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCalendarCxxSpecJSI *>(&turboModule)->listEvents(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeCalendarCxxSpecJSI_updateEvent(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCalendarCxxSpecJSI *>(&turboModule)->updateEvent(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asString(rt),
    count <= 3 || args[3].isUndefined() ? std::nullopt : std::make_optional(args[3].asString(rt))
  );
}
static jsi::Value __hostFunction_NativeCalendarCxxSpecJSI_deleteEvent(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCalendarCxxSpecJSI *>(&turboModule)->deleteEvent(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeCalendarCxxSpecJSI_getPermissionStatus(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCalendarCxxSpecJSI *>(&turboModule)->getPermissionStatus(
    rt
  );
}

NativeCalendarCxxSpecJSI::NativeCalendarCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("CalendarModule", jsInvoker) {
  methodMap_["requestPermission"] = MethodMetadata {0, __hostFunction_NativeCalendarCxxSpecJSI_requestPermission};
  methodMap_["createEvent"] = MethodMetadata {3, __hostFunction_NativeCalendarCxxSpecJSI_createEvent};
  methodMap_["listEvents"] = MethodMetadata {1, __hostFunction_NativeCalendarCxxSpecJSI_listEvents};
  methodMap_["updateEvent"] = MethodMetadata {4, __hostFunction_NativeCalendarCxxSpecJSI_updateEvent};
  methodMap_["deleteEvent"] = MethodMetadata {1, __hostFunction_NativeCalendarCxxSpecJSI_deleteEvent};
  methodMap_["getPermissionStatus"] = MethodMetadata {0, __hostFunction_NativeCalendarCxxSpecJSI_getPermissionStatus};
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_addListener(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->addListener(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_removeListeners(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->removeListeners(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_requestSpeechRecognitionAuthorization(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->requestSpeechRecognitionAuthorization(
    rt
  );
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_startRecognition(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->startRecognition(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asBool()
  );
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_stopRecognition(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->stopRecognition(
    rt
  );
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_destroyRecognizer(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->destroyRecognizer(
    rt
  );
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_isRecognitionAvailable(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->isRecognitionAvailable(
    rt
  );
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_getSupportedLocales(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->getSupportedLocales(
    rt
  );
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_getAvailableVoices(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->getAvailableVoices(
    rt
  );
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_speak(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->speak(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_stopSpeaking(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->stopSpeaking(
    rt
  );
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_pauseSpeaking(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->pauseSpeaking(
    rt
  );
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_resumeSpeaking(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->resumeSpeaking(
    rt
  );
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_isSpeaking(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->isSpeaking(
    rt
  );
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_isPaused(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->isPaused(
    rt
  );
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_setDefaultVoice(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->setDefaultVoice(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_configureAudioSession(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->configureAudioSession(
    rt
  );
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_releaseAudioSession(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->releaseAudioSession(
    rt
  );
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_getVersion(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->getVersion(
    rt
  );
}
static jsi::Value __hostFunction_NativeSpeechModuleCxxSpecJSI_isInitialized(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeSpeechModuleCxxSpecJSI *>(&turboModule)->isInitialized(
    rt
  );
}

NativeSpeechModuleCxxSpecJSI::NativeSpeechModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("SpeechModule", jsInvoker) {
  methodMap_["addListener"] = MethodMetadata {1, __hostFunction_NativeSpeechModuleCxxSpecJSI_addListener};
  methodMap_["removeListeners"] = MethodMetadata {1, __hostFunction_NativeSpeechModuleCxxSpecJSI_removeListeners};
  methodMap_["requestSpeechRecognitionAuthorization"] = MethodMetadata {0, __hostFunction_NativeSpeechModuleCxxSpecJSI_requestSpeechRecognitionAuthorization};
  methodMap_["startRecognition"] = MethodMetadata {2, __hostFunction_NativeSpeechModuleCxxSpecJSI_startRecognition};
  methodMap_["stopRecognition"] = MethodMetadata {0, __hostFunction_NativeSpeechModuleCxxSpecJSI_stopRecognition};
  methodMap_["destroyRecognizer"] = MethodMetadata {0, __hostFunction_NativeSpeechModuleCxxSpecJSI_destroyRecognizer};
  methodMap_["isRecognitionAvailable"] = MethodMetadata {0, __hostFunction_NativeSpeechModuleCxxSpecJSI_isRecognitionAvailable};
  methodMap_["getSupportedLocales"] = MethodMetadata {0, __hostFunction_NativeSpeechModuleCxxSpecJSI_getSupportedLocales};
  methodMap_["getAvailableVoices"] = MethodMetadata {0, __hostFunction_NativeSpeechModuleCxxSpecJSI_getAvailableVoices};
  methodMap_["speak"] = MethodMetadata {2, __hostFunction_NativeSpeechModuleCxxSpecJSI_speak};
  methodMap_["stopSpeaking"] = MethodMetadata {0, __hostFunction_NativeSpeechModuleCxxSpecJSI_stopSpeaking};
  methodMap_["pauseSpeaking"] = MethodMetadata {0, __hostFunction_NativeSpeechModuleCxxSpecJSI_pauseSpeaking};
  methodMap_["resumeSpeaking"] = MethodMetadata {0, __hostFunction_NativeSpeechModuleCxxSpecJSI_resumeSpeaking};
  methodMap_["isSpeaking"] = MethodMetadata {0, __hostFunction_NativeSpeechModuleCxxSpecJSI_isSpeaking};
  methodMap_["isPaused"] = MethodMetadata {0, __hostFunction_NativeSpeechModuleCxxSpecJSI_isPaused};
  methodMap_["setDefaultVoice"] = MethodMetadata {1, __hostFunction_NativeSpeechModuleCxxSpecJSI_setDefaultVoice};
  methodMap_["configureAudioSession"] = MethodMetadata {0, __hostFunction_NativeSpeechModuleCxxSpecJSI_configureAudioSession};
  methodMap_["releaseAudioSession"] = MethodMetadata {0, __hostFunction_NativeSpeechModuleCxxSpecJSI_releaseAudioSession};
  methodMap_["getVersion"] = MethodMetadata {0, __hostFunction_NativeSpeechModuleCxxSpecJSI_getVersion};
  methodMap_["isInitialized"] = MethodMetadata {0, __hostFunction_NativeSpeechModuleCxxSpecJSI_isInitialized};
}


} // namespace facebook::react
